generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")

  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum GenderEnum {
  Male
  Female
}

enum JobTypeEnum {
  AVAILABLE_JOBS
  FREELANCE
}

enum CurrencyEnum {
  LBP
  USD
}

enum JobTimeEnum {
  FULL_TIME
  PART_TIME
}

enum SaleTypeEnum {
  SALE
  RENT
}

enum PropertyTypeEnum {
  RESIDENTIAL
  COMMERCIAL
  INDUSTRIAL
  LAND
}

enum TransmissionEnum {
  MANUAL
  AUTOMATIC
}

enum ColorEnum {
  White
  Black
  Gray
  Silver
  Red
  Blue
  Brown
  Green
  Beige
  Orange
  Gold
  Yellow
  Purple
}

enum ConditionEnum {
  NEW
  USED
}

enum RoleEnum {
  MEMBER
  ADMIN
}

model User {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  email       String    @unique
  username    String
  password    String?
  phone       String?
  dateOfBirth DateTime?
  address     String?
  website     String?
  active      Boolean?  @default(false)

  bio String?

  profilePicPath String?
  cvPath         String?

  school     String?
  degree     String?
  studyField String?
  grade      String?

  verifyEmailToken    String?
  forgotPasswordToken String?

  premiumStart DateTime?
  premiumEnd   DateTime?
  isPremium    Boolean?  @default(false)

  googleId   String?
  facebookId String?

  role   RoleEnum    @default(MEMBER)
  gender GenderEnum?

  experiences           Experience[]
  publishedJobs         Job[]
  publishedServices     Service[]
  publishedrRealEstates RealEstate[]
  publishedVehicles     Vehicle[]
}

model Experience {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  title     String
  industry  String
  startDate DateTime
  endDate   DateTime?
  active    Boolean   @default(false)

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model CompanyAd {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String?
  imagePath String
  website   String?
  active    Boolean  @default(true)
}

model Job {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  title       String
  salary      Decimal? @db.Decimal(10, 2)
  description String?
  filePath    String?
  city        String?
  address     String?

  currency CurrencyEnum
  type     JobTypeEnum
  time     JobTimeEnum

  category    JobCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  country     Country     @relation(fields: [countryId], references: [id])
  countryId   Int
  region      Region?     @relation(fields: [regionId], references: [id])
  regionId    Int?
  publisher   User        @relation(fields: [publisherId], references: [id])
  publisherId Int
}

model JobCategory {
  id     Int    @id @default(autoincrement())
  name   String
  nameAr String
  jobs   Job[]
}

model Service {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  title       String
  price       Decimal? @db.Decimal(10, 2)
  description String?
  files       File[]
  city        String?
  address     String?

  currency CurrencyEnum

  category    ServiceCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  country     Country         @relation(fields: [countryId], references: [id])
  countryId   Int
  region      Region?         @relation(fields: [regionId], references: [id])
  regionId    Int?
  publisher   User            @relation(fields: [publisherId], references: [id])
  publisherId Int
}

model ServiceCategory {
  id       Int       @id @default(autoincrement())
  name     String
  nameAr   String
  services Service[]
}

model RealEstate {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  title       String
  price       Decimal  @db.Decimal(10, 2)
  description String
  city        String?
  size        Int?
  bathrooms   Int?
  bedrooms    Int?
  furnished   Boolean?
  phone       String
  floor       Int?

  condition    ConditionEnum
  saleType     SaleTypeEnum
  propertyType PropertyTypeEnum
  currency     CurrencyEnum

  premiumStart DateTime?
  premiumEnd   DateTime?
  isPremium    Boolean?  @default(false)

  files File[]

  amenity   Amenity? @relation(fields: [amenityId], references: [id])
  amenityId Int?

  category    RealEstateCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  country     Country            @relation(fields: [countryId], references: [id])
  countryId   Int
  region      Region?            @relation(fields: [regionId], references: [id])
  regionId    Int?
  publisher   User               @relation(fields: [publisherId], references: [id])
  publisherId Int
}

model Amenity {
  id          Int          @id @default(autoincrement())
  name        String
  nameAr      String
  realEstates RealEstate[]
}

model Vehicle {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  title       String
  phone       String
  price       Decimal  @db.Decimal(10, 2)
  description String?
  kilometers  Int?
  year        Int?
  city        String?

  condition    ConditionEnum
  transmission TransmissionEnum?
  color        ColorEnum?
  currency     CurrencyEnum

  premiumStart DateTime?
  premiumEnd   DateTime?
  isPremium    Boolean?  @default(false)

  files File[]

  category    VehicleCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  country     Country         @relation(fields: [countryId], references: [id])
  countryId   Int
  region      Region?         @relation(fields: [regionId], references: [id])
  regionId    Int?
  publisher   User            @relation(fields: [publisherId], references: [id])
  publisherId Int
}

model VehicleCategory {
  id       Int       @id @default(autoincrement())
  name     String
  nameAr   String
  vehicles Vehicle[]
}

model RealEstateCategory {
  id          Int          @id @default(autoincrement())
  name        String
  nameAr      String
  realEstates RealEstate[]
}

model File {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  path      String

  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId Int?

  realEstate   RealEstate? @relation(fields: [realEstateId], references: [id])
  realEstateId Int?

  service   Service? @relation(fields: [serviceId], references: [id])
  serviceId Int?
}

model Country {
  id          Int          @id @default(autoincrement())
  name        String
  nameAr      String
  jobs        Job[]
  vehicles    Vehicle[]
  realEstates RealEstate[]
  services    Service[]
  regions     Region[]
}

model Region {
  id     Int    @id @default(autoincrement())
  name   String
  nameAr String

  vehicles    Vehicle[]
  realEstates RealEstate[]
  services    Service[]
  jobs        Job[]

  country   Country @relation(fields: [countryId], references: [id])
  countryId Int
}

//TODO cron job for realestate and vehicle premium
